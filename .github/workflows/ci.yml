name: Continuous Integration

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Install LLVM 18
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt update
          sudo apt install llvm-18 llvm-18-dev llvm-18-tools clang-18 clang-tidy-18 clang-format-18 clang-tools-18 libclang-18-dev -y

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-18 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  test-avx512:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-22.04]

    runs-on: ${{ matrix.os }}

    env:
      CC: clang-18
      CXX: clang++-18
      CLANG_DIR: '/usr/lib/llvm-18/lib/cmake/clang'
      LLVM_DIR: '/usr/lib/llvm-18/lib/cmake/llvm'


    steps:
    - uses: actions/checkout@v4

    - name: Install LLVM 18
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt update
          sudo apt install llvm-18 llvm-18-dev llvm-18-tools clang-18 clang-tidy-18 clang-format-18 clang-tools-18 libclang-18-dev -y

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt-get install clang-tidy-18 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-18 140

    - name: Conan cache
      uses: actions/cache@v4
      with:
        path: conan_cache_save-${{ matrix.os}}.tgz
        key: conan-${{ matrix.os }}-${{ hashFiles('conan*.[pl][yo]*') }}

    - name: Install dependencies
      shell: bash
      run: bash < .github/scripts/conan-ci-setup.sh

    - name: Configure
      shell: pwsh
      run: |
        $output = cmake -DENABLE_SIMD=ON "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        Write-Output $output
        if ($output -match "AVX-512 is supported") {
            Write-Output "AVX512 is enabled"
        } else {
            throw "AVX512 is not available"
        }

    - name: Build
      run: cmake --build build --config Release -j 4

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2

  test-nosimd:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-22.04]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install LLVM 18
      run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
          sudo apt update
          sudo apt install llvm-18 llvm-18-dev llvm-18-tools clang-18 clang-tidy-18 clang-format-18 clang-tools-18 libclang-18-dev -y

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt-get install clang-tidy-18 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-18 140

    - name: Conan cache
      uses: actions/cache@v4
      with:
        path: conan_cache_save-${{ matrix.os}}.tgz
        key: conan-${{ matrix.os }}-${{ hashFiles('conan*.[pl][yo]*') }}

    - name: Install dependencies
      shell: bash
      run: bash < .github/scripts/conan-ci-setup.sh

    - name: Configure
      shell: pwsh
      run: |
        $output = cmake -DENABLE_SIMD=OFF "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        Write-Output $output
        if ($output -match "SIMD is not supported by the compiler") {
            Write-Output "SIMD is disabled"
        } else {
            throw "SIMD is enabled when it should not be"
        }

    - name: Build
      run: cmake --build build --config Release -j 4

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2

  test-neon:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-14]

    runs-on: ${{ matrix.os }}

    env:
      CC: /opt/homebrew/opt/llvm@18/bin/clang
      CXX: /opt/homebrew/opt/llvm@18/bin/clang++
      CLANG_DIR: '/opt/homebrew/opt/llvm@18/bin/clang'
      LLVM_DIR: '/opt/homebrew/opt/llvm@18'

    steps:
    - uses: actions/checkout@v4

    - name: Install LLVM 18
      run: |
          brew install llvm@18

    - name: Verify Installation
      run: |
          ${{ env.CC }} --version
          ${{ env.CXX }} --version

    - name: Install static analyzers
      if: matrix.os == 'macos-14'
      run: >-
        brew install cppcheck

    - name: Install Python
      uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Conan cache
      uses: actions/cache@v4
      with:
        path: conan_cache_save-${{ matrix.os}}.tgz
        key: conan-${{ matrix.os }}-${{ hashFiles('conan*.[pl][yo]*') }}

    - name: Install dependencies
      shell: bash
      run: bash < .github/scripts/conan-ci-setup.sh

    - name: Configure
      shell: pwsh
      run: |
        $output = cmake -DENABLE_SIMD=OFF "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        Write-Output $output
        if ($output -match "ARM NEON is supported by the compiler") {
            Write-Output "ARM NEON is enabled"
        } else {
            throw "ARM NEON is not available"
        }

    - name: Build
      run: cmake --build build --config Release -j 4

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2
